'use client';

import React from 'react';
import Image from 'next/image';
import { motion, useScroll, useTransform } from 'framer-motion';
import { Card, CardContent } from "../../components/ui/card";
import { Badge } from "../../components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../../components/ui/tooltip";
import { Button } from "../../components/ui/button";

const StakingSection = () => {
  const { scrollYProgress } = useScroll();

  const stakingSteps = [
    {
      icon: '🔒',
      title: 'NFT Staking',
      description: 'Lock your bears to earn daily points and generate real returns.',
      delay: 0.2
    },
    {
      icon: '🎁',
      title: 'Periodic Rewards',
      description: 'Rewards distributed every 45 days based on your accumulated points.',
      delay: 0.4
    },
    {
      icon: '⏱️',
      title: 'Progressive System',
      description: 'The longer your bears are staked, the more points you accumulate.',
      delay: 0.6
    },
    {
      icon: '🔓',
      title: 'Minimum Period',
      description: 'Minimum 15-day staking period to preserve your accumulated points.',
      delay: 0.8
    }
  ];

  const detailedSections = [
    {
      title: 'Mint Process',
      description: 'The initial sale (mint) revenue isn\'t spent but reinvested directly in BERA/ETH liquidity pools on Berachain, creating a sustainable economic foundation.',
      icon: '💰',
      delay: 0.3
    },
    {
      title: 'Reward Generation',
      description: 'The deposited liquidity automatically generates rewards in ETH (Ethereum). These rewards are periodically reinvested to increase the staking balance, creating a compound interest effect.',
      icon: '📈',
      delay: 0.5
    },
    {
      title: 'Distribution System',
      description: 'Every 45 days, a portion of accumulated returns (proportional to staking points) is redistributed among holders who have staked their Fluffy Bears.',
      icon: '📊',
      delay: 0.7
    },
    {
      title: 'Security & Sustainability',
      description: 'As initial capital remains locked in pools generating real returns, the model doesn\'t rely on inflating new tokens or a fictional economy. It\'s a system based on real income generated by blockchain liquidity.',
      icon: '🛡️',
      delay: 0.9
    }
  ];

  const stakingTimeline = [
    {
      icon: "🔒",
      title: "NFT Staking",
      description: "Lock your bears to earn daily points and generate real returns.",
    },
    {
      icon: "🎁",
      title: "Periodic Rewards",
      description: "Rewards distributed every 45 days based on your accumulated points.",
    },
    {
      icon: "⏱️",
      title: "Progressive System",
      description: "The longer your bears are staked, the more points you accumulate.",
    },
    {
      icon: "🔓",
      title: "Minimum Period",
      description: "Minimum 15-day staking period to preserve your accumulated points.",
    },
  ];

  const mechanics = [
    {
      icon: "💰",
      title: "Mint Process",
      description: "The initial sale (mint) revenue isn't spent but reinvested directly in BERA/ETH liquidity pools on Berachain, creating a sustainable economic foundation.",
    },
    {
      icon: "📈",
      title: "Reward Generation",
      description: "The deposited liquidity automatically generates rewards in ETH (Ethereum). These rewards are periodically reinvested to increase the staking balance, creating a compound interest effect.",
    },
    {
      icon: "📊",
      title: "Distribution System",
      description: "Every 45 days, a portion of accumulated returns (proportional to staking points) is redistributed among holders who have staked their Fluffy Bears.",
    },
    {
      icon: "🛡️",
      title: "Security & Sustainability",
      description: "As initial capital remains locked in pools generating real returns, the model doesn't rely on inflating new tokens or a fictional economy. It's a system based on real income generated by blockchain liquidity.",
    },
  ];

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.3
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5,
        ease: [0.4, 0, 0.2, 1]
      }
    }
  };

  const cardVariants = {
    hidden: { scale: 0.95, opacity: 0 },
    visible: {
      scale: 1,
      opacity: 1,
      transition: {
        duration: 0.5,
        ease: [0.4, 0, 0.2, 1]
      }
    }
  };

  return (
    <motion.section 
      className="relative py-28 bg-gradient-to-br from-amber-50 via-blue-50 to-green-50 overflow-hidden"
      initial="hidden"
      whileInView="visible"
      viewport={{ once: true, margin: "-100px" }}
      variants={containerVariants}
    >
      {/* Floating decorative elements with parallax effect */}
      <motion.div 
        className="absolute -top-20 left-10 w-48 h-48 bg-amber-200/30 rounded-full blur-2xl"
        style={{
          y: useTransform(scrollYProgress, [0, 1], [0, 100]),
          opacity: useTransform(scrollYProgress, [0, 0.5], [0.3, 0])
        }}
      />
      <motion.div 
        className="absolute bottom-0 right-0 w-72 h-72 bg-blue-200/30 rounded-full blur-2xl"
        style={{
          y: useTransform(scrollYProgress, [0, 1], [0, -100]),
          opacity: useTransform(scrollYProgress, [0, 0.5], [0.3, 0])
        }}
      />
      <motion.div 
        className="absolute top-1/2 left-1/2 w-32 h-32 bg-green-200/30 rounded-full blur-2xl"
        style={{
          scale: useTransform(scrollYProgress, [0, 1], [1, 1.5]),
          opacity: useTransform(scrollYProgress, [0, 0.5], [0.3, 0])
        }}
      />

      <div className="container mx-auto px-4 relative z-10">
        <motion.div 
          className="text-center mb-16"
          variants={itemVariants}
        >
          <h2 className="text-5xl md:text-6xl font-extrabold text-amber-900 drop-shadow-lg mb-6 tracking-tight">
            How Fluffy Bears Staking Works
          </h2>
          <p className="text-xl text-amber-800 max-w-2xl mx-auto mb-4">
            Stake your adorable bears to earn exclusive rewards periodically. It's simple, fun, and beneficial for all Fluffy Nation members!
          </p>
        </motion.div>

        {/* Timeline Stepper */}
        <motion.div 
          className="flex flex-col md:flex-row items-center justify-center gap-8 mb-20"
          variants={containerVariants}
        >
          {stakingTimeline.map((step, idx) => (
            <motion.div
              key={step.title}
              className="relative group"
              variants={cardVariants}
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="glassmorphism-card w-64 h-64 flex flex-col items-center justify-center p-6 border-2 border-amber-200 shadow-xl">
                <div className="flex items-center justify-center w-16 h-16 mb-4">
                  <motion.span 
                    className="text-5xl"
                    animate={{ y: [0, -10, 0] }}
                    transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                  >
                    {step.icon}
                  </motion.span>
                </div>
                <h3 className="text-xl font-bold text-amber-800 mb-2 text-center whitespace-nowrap">{step.title}</h3>
                <p className="text-amber-700 text-center text-base">{step.description}</p>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Badge className="absolute top-4 right-4 bg-amber-100 text-amber-800 cursor-pointer">Info</Badge>
                    </TooltipTrigger>
                    <TooltipContent>
                      <span>{step.description}</span>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </Card>
              {idx < stakingTimeline.length - 1 && (
                <motion.div 
                  className="hidden md:block absolute right-0 top-1/2 -translate-y-1/2 w-12 h-1 bg-gradient-to-r from-amber-300 to-blue-300"
                  style={{ zIndex: -1 }}
                  initial={{ scaleX: 0 }}
                  whileInView={{ scaleX: 1 }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                />
              )}
            </motion.div>
          ))}
        </motion.div>

        {/* Mechanics Infographics */}
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-2 gap-10 mb-20"
          variants={containerVariants}
        >
          {mechanics.map((item, idx) => (
            <motion.div
              key={item.title}
              variants={cardVariants}
              whileHover={{ scale: 1.02 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="glassmorphism-card p-8 flex flex-col gap-4 border-2 border-blue-200 shadow-lg">
                <div className="flex items-center gap-4 mb-2">
                  <motion.span 
                    className="text-4xl"
                    animate={{ 
                      scale: [1, 1.2, 1],
                      rotate: [0, 5, 0]
                    }}
                    transition={{ 
                      duration: 2,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                  >
                    {item.icon}
                  </motion.span>
                  <h4 className="text-xl font-bold text-blue-800">{item.title}</h4>
                </div>
                <p className="text-blue-700 text-base">{item.description}</p>
              </Card>
            </motion.div>
          ))}
        </motion.div>

        {/* Animated Progress Bar & Call to Action */}
        <motion.div 
          className="relative max-w-3xl mx-auto mb-20"
          variants={itemVariants}
        >
          <Card className="glassmorphism-card p-10 flex flex-col items-center border-2 border-green-200 shadow-2xl">
            <motion.div 
              className="w-full flex flex-col items-center mb-6"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <motion.div 
                className="w-16 h-16 mb-2"
                animate={{ 
                  y: [0, -10, 0],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <Image 
                  src="/Images/logotransparente.png"
                  alt="Fluffy Bears Logo"
                  width={64}
                  height={64}
                  className="w-full h-full object-contain"
                />
              </motion.div>
              <h3 className="text-2xl font-bold text-green-800 mb-2">Ready to Start?</h3>
              <p className="text-green-700 mb-4 text-center">Stake now and become part of the Fluffy Nation! The sooner you start, the more rewards you can accumulate.</p>
              <motion.a 
                href="/fluffy_bears_simulator_updated.html"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button className="bg-gradient-to-r from-amber-500 to-green-500 hover:from-amber-600 hover:to-green-600 text-white font-bold py-3 px-8 rounded-full text-lg shadow-lg">
                  Simulate Now
                </Button>
              </motion.a>
            </motion.div>
            <motion.div 
              className="w-full h-4 bg-amber-100 rounded-full overflow-hidden shadow-inner"
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <motion.div 
                className="h-4 bg-gradient-to-r from-amber-400 to-green-400 rounded-full"
                initial={{ width: "0%" }}
                whileInView={{ width: "100%" }}
                transition={{ duration: 1, ease: "easeInOut" }}
              />
            </motion.div>
          </Card>
        </motion.div>
      </div>
      <style jsx>{`
        .glassmorphism-card {
          background: rgba(255, 255, 255, 0.7);
          box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
          backdrop-filter: blur(8px);
          border-radius: 2rem;
        }
      `}</style>
    </motion.section>
  );
};

export default StakingSection; 